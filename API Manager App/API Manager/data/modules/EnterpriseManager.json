{
  "_CommonDescriptions": {
    "QueryId": {
      "_Description": "Query ID from which data to be retrived, these query files are placed in 'queries' folder",
      "_DataType": "String"
    },
    "autoRead": {
      "_Description": "Set true if data should be read immediately after building data source",
      "_DataType": "Boolean"
    },
    "autoBind": {
      "_Description": "Set false if widget should read from datasource or data argument passed in refreshDataSource method",
      "_DataType": "Boolean"
    },
    "staticData": {
      "_Description": "If set true it fetches data from query else it fetches data from data source",
      "_DataType": "Boolean"
    },
    "Template": {
      "_Description": "Template path, it can be either string or a object, if template is registered in templatestore then mention template id as string else create a property 'Path' and set complete path as string",
      "_DataType": "String or Object",
      "_InnerFields": {
        "Path": {
          "_Description": "Path for the template in text format",
          "_DataType": "String"
        },
        "Extension": {
          "_Description": "Template extension, default value is '.html'",
          "_DataType": "String"
        }
      }
    },
    "Dependables": {
      "_Description": "It gets data and response from the widget's queryId and calls onDataSourceReady method of widgets which has queryId listed in Queries array and passes the data and response as arguments",
      "_DataType": "Object",
      "_InnerFields": {
        "Queries": {
          "_Description": "It take Array of strings, each string is a queryId",
          "_DataType": "Array"
        }
      }
    },
    "isDepending": {
      "_Description": "Set true if data for this widget is read by different widget and passed through Dependables query, default value is 'false'",
      "_DataType": "Boolean"
    },
    "IsDependent": {
      "_Description": "If Set true it does not pass response and data to dependable widget, default value is 'false'",
      "_DataType": "Boolean",
      "_Note": "Currently not in use"
    },
    "refreshOnBind": {
      "_Description": "Set true if chart should be refreshed after binding data",
      "_DataType": "Boolean"
    },
    "width": {
      "_Description": "Width of the widget in pixels",
      "_DataType": "Integer"
    },
    "height": {
      "_Description": "Height of the widget in pixels",
      "_DataType": "Integer"
    },
    "releaseQuery": {
      "_Description": "If set true it delets the corresponding query object in viewModel on call of widget destroy method call, default value is 'false'",
      "_DataType": "Boolean"
    },
    "Text": {
      "_Description": "Text for the item, it can be fetched from locales folder. It accepts JSON path from where text is to be fetched or normal string",
      "_DataType": "String"
    },
    "hoverDelay": {
      "_Description": "Time to wait before expanding or collapsing the menuitem when hovered, Time in milliseconds, default value is 500",
      "_DataType": "Integer"
    },
    "collapsible": {
      "_Description": "If set true it Displays icon or button to collapse or expand, default value is 'true'",
      "_DataType": "Boolean"
    },
    "Class": {
      "_Description": "Css Class to be applied to dom element or the perticular block",
      "_DataType": "String"
    },
    "Action": {
      "_Description": "Name of the function which is to be triggered when clicked on it. This function is declared in events folder",
      "_DataType": "String"
    },
    "accessCode": {
      "_Description": "Access code to mention who have rights to use this option",
      "_DataType": "String"
    },
    "iconClass": {
      "_Description": "Icon Class from where icon is fetched",
      "_DataType": "String"
    },
    "refreshAfterCommand": {
      "_Description": "Set true if widget needs to be refreshed after executing method name mentioned in data-command attribute of widget item",
      "_DataType": "Boolean"
    },
    "messagebarForListViewAndGrid": {
      "_Description": "It creates APMessageBar widget to display messages using 'displayMessage' and 'displayErrors' methods, by default it displays message from Message property in respective Query file",
      "_DataType": "Object",
      "_InnerFields": {
        "hidebuttontext": {
          "_Description": "Text to be displayed for hide button",
          "_DataType": "String"
        }
      }
    },
    "customScroll": {
      "_Description": "Set true to enable custom scroll",
      "_DataType": "Boolean"
    },
    "loadingTemplate": {
      "_Description": "HTML or Template to be displayed while loading the widget",
      "_DataType": "Srting"
    },
    "ButtonDOM": {
      "_Description": "Explicitly specify which tag to be used to create this button widget, default tag is 'button'",
      "_DataType": "String"
    },
    "Attr": {
      "_Description": "Html attributes to be applied to the DOM element",
      "_DataType": "Object"
    },
    "Bindings": {
      "_Description": "Values to be set in data-bind attribute of the current block or element, it takes array of objects",
      "_DataType": "Array"
    },
    "showText": {
      "_Description": "Set true if text should be displayed else set to false",
      "_DataType": "Boolean"
    },
    "Size": {
      "_Description": "Size of the widget",
      "_DataType": "Object",
      "_InnerFields": {
        "Width": {
          "_Description": "Width of the block starts from 1",
          "_DataType": "Integer"
        },
        "Height": {
          "_Description": "Width of the block starts from 1",
          "_DataType": "Integer"
        }
      }
    },
    "External": {
      "_Description": "If set false it it loads template from 'Path' attribute but currently not in use, default value is 'false'",
      "_DataType": "Boolean"
    },
    "enabled": {
      "_Description": "Set true to enable button, default value is 'false'",
      "_DataType": "Boolean"
    },
    "showTooltip": {
      "_Description": "Set false to disable tooltip, default value is 'true'",
      "_DataType": "Boolean"
    },
    "iconRequired": {
      "_Description": "If set true it displays the icon, default value is 'true'",
      "_DataType": "Boolean"
    },
    "extraClass": {
      "_Description": "Additional class to be added to the toolbar item",
      "_DataType": "String"
    },
    "toolBarButtons": {
      "_Description": "Buttons to be created in tool bar, it takes array of objects, each object is a set of configurations to create a button",
      "_DataType": "Array",
      "_InnerFields": {
        "text": "_CommonDescriptions.Text",
        "accessCode": "_CommonDescriptions.accessCode",
        "action": "_CommonDescriptions.Action",
        "IsWidget": {
          "_Description": "If set true it creates a new widget mentioned in the current block, default value is 'false'",
          "_DataType": "Boolean"
        },
        "submit": {
          "_Description": "If set true it creates a submit Button element, default value is 'false'",
          "_DataType": "Boolean"
        },
        "showText": "_CommonDescriptions.showText",
        "Class": "_CommonDescriptions.Class",
        "extraClass": "_CommonDescriptions.extraClass",
        "iconRequired": "_CommonDescriptions.iconRequired",
        "id": {
          "_Description": "Button ID",
          "_DataType": "String"
        },
        "iconClass": "_CommonDescriptions.iconClass",
        "showTooltip": "_CommonDescriptions.showTooltip",
        "enabled": "_CommonDescriptions.enabled",
        "attr": "_CommonDescriptions.Attr",
        "customModule": {
          "_Description": "Custom module configuration, this loads only if isWidget is set true",
          "_DataType": "Object",
          "_InnerFields": {
            "id": {
              "_Description": "ID for the module",
              "_DataType": "String"
            }
          }
        },
        "_Note": "If both isWidget and submit are set true then isWidget gets preference. If both are false then it uses anchor element"
      }
    },
    "UrlId": {
      "_Description": "Help Url, to where the page should be redirected on click",
      "_DataType": "String",
      "_Note": "To use this configuration 'Template.Path' has to be set to 'apps/em/content/templates/help/help'"
    }
  },
  "DNAConfiguration": {
    "DOM": {
      "_Description": "Specify which HTML element to be used to create 'Block', default element is 'div'",
      "_DataType": "String"
    },
    "Class": "_CommonDescriptions.Class",
    "ExClass": "_CommonDescriptions.Class",
    "ExtraClass": "_CommonDescriptions.Class",
    "Replace": {
      "_Description": "Set true if content should replace previous content",
      "_DataType": "Boolean"
    },
    "IsMaster": {
      "_Description": "Set true if the element is a root or master element",
      "_DataType": "Boolean"
    },
    "FieldsDOM": {
      "_Description": "This is used to specify HTML element for Fields",
      "_DataType": "String"
    },
    "FieldsClass": {
      "_Description": "This is used to specify class for DOM element for Fields",
      "_DataType": "String"
    },
    "Fields": {
      "_Description": "Creating field elements to dispaly information [Array of Objects]. default element is span, it can be changed by specifying it in FieldsDOM property",
      "_DataType": "Array",
      "_InnerFields": {
        "DOM": {
          "_Description": "DOM block element which is to be created, default element is div",
          "_DataType": "String"
        },
        "Class": {
          "_Description": "Class of the created dom element or the perticular block",
          "_DataType": "String"
        },
        "Attr": {
          "_Description": "Html attributes to be applied to the DOM element",
          "_DataType": "Object"
        },
        "FieldsDOM": {
          "_Description": "This is used to specify DOM element for Fields",
          "_DataType": "String"
        },
        "FieldsClass": {
          "_Description": "This is used to specify class for DOM element for Fields",
          "_DataType": "String"
        },
        "Fields": {
          "_Description": "Creating field elements to dispaly information [Array of Objects]. default element is span, it can be changed by specifying it in FieldsDOM property",
          "_DataType": "Array"
        },
        "Text": "_CommonDescriptions.Text",
        "Template": "_CommonDescriptions.Template",
        "Bindings": {
          "_Description": "Key value pair which is to be bound in data-bind attribute",
          "_DataType": "Object"
        },
        "BindPath": {
          "_Description": "Binding path from where text is to be fetched in viewModel",
          "_DataType": "String"
        },
        "UrlId": "_CommonDescriptions.UrlId"
      }
    },
    "ContentTemplate": "_CommonDescriptions.Template",
    "Attr": "_CommonDescriptions.Attr",
    "Widget": {
      "_Description": "Making dom element into an widget",
      "_DataType": "Object",
      "_InnerFields": {
        "Type": {
          "_Description": "Specify type of widget to be created",
          "_DataType": "String"
        },
        "Config": {
          "_Description": "Configuration settings to be applied to Widget",
          "_DataType": "Object"
        },
        "_Note": "For more configurations and settings refer CreatingWidget section"
      }
    },
    "ExBlocksClass": {
      "_Description": "Css Class for blocks container",
      "_DataType": "String"
    },
    "Type": {
      "_Description": "If it is set to 'List' it makes Blocks element as 'ul'  else 'div'",
      "_DataType": "String"
    },
    "Template": "_CommonDescriptions.Template",
    "Blocks": {
      "_Description": "creating inner elements. It accepts array of [objects(creating element object) or string(path of the javascript file in dna folder which returns the element object)]. ",
      "_DataType": "Array"
    },
    "Bindings": "_CommonDescriptions.Bindings",
    "BlocksBindings": {
      "_Description": "Values to be set in data-bind attribute of blocks in the current block, it takes array of objects",
      "_DataType": "Array"
    },
    "UrlId": "_CommonDescriptions.UrlId"
  },
  "ImportantMethodsInEM": {
    "Model": {
      "getBlock": {
        "_Description": "getBlock method is use to get the block id eg 'EMMain' from the ViewModel object and return the values to calling methods",
        "_Arguments": {
          "BlockId": "Unique id given to the block"
        }
      },
      "DataSource": {
        "getDataFromFields": {
          "_Description": "getDataFromFields method is use to get the data/load the data for the form fields ",
          "_Arguments": {
            "Fields": "this argument contain complete data of the form fields in object form",
            "initialData": "initial this arg has to data after method completion oly the nessesary data is assign to this argument"

          }
        }
      }
    },
    "View": {
      "Internationalize": {
        "translate": {
          "_Description": "translate method is use to translate the json object to proper string which is to be display in forms and return the value to calling method",
          "_Arguments": {
            "Translate": "this arg have the json value"

          }
        }
      },
      "getBlock": {
        "_Description": "getBlock fetch the complete element and stores it",
        "_Arguments": {
          "id": "this arg contain the block id that has to fetch"
        }
      },

      "Templates": {
        "renderTemplate": {
          "_Description": "renderTemplate method is use to fetch the templates which are used in the form finally return the compile tamplate HTML",
          "_Arguments": {
            "TemplateId": "Template path or template defined in templateStore",
            "Data": "Data which is to be applied in the template"

          }
        },
        "renderTemplateAsync": {
          "_Description": "renderTemplate method is use to fetch the templates in asynchronously which are used in the form finally return the compile tamplate HTML",
          "_Arguments": {
            "TemplateId": "Template path or template defined in templateStore",
            "Data": "Data which is to be applied in the template",
            "callbacks": "A object in which success and error callback functions are defined"
          }
        }
      },
      "showAlertKey": {
        "_Description": "showAlertkey method is use to convert the json value to string",
        "_Arguments": {
          "key": "this arg holds the json value which has to be cobverted to string"
        }
      },
      "showAlert": {
        "_Description": "showAlert method is use to show alertbox",
        "_Arguments": {
          "message": "this arg holds the data to be display in the alertbox"
        }
      },
      "Waiting": {
        "show": {
          "_Description": "show method is widget method which is use to display waiting animation dot(. . . )",
          "_Arguments": {
            "message": "it has 1 parameter v can pass or omit the arg "
          }
        },
        "hide": {
          "_Description": "hide is widget method which is use to hide the waiting dot"
        }
      },
      "confirmKey": {
        "_Description": "confirmKey method is use to convert the json value to string",
        "_Arguments": {
          "key": "this arg holds the json value which has to be converted to string"
        }
      },
      "confirm": {
        "_Description": "Confirm method kind of alertbox for confirming before deleting data",
        "_Arguments": {
          "message": "message that has to b display in confirm box",
          "buttons": "Array of objects, each object is configuration for creating buttons, bu default it creates 'ok' and 'cancel' buttons",
          "actions": "The buttons for interacting with the window in array of strings. Predefined values are 'Close', 'Refresh', 'Minimize', and 'Maximize'"
        }
      }
    },
    "Controller": {
      "route": {
        "_Description": "route method is use to route the control to diffrent file for execution",
        "_Arguments": {
          "Route": "this arg holds the route file path",
          "Args": "this arg will hold the objects"

        }
      }
    },
    "Config": {
      "resetQuery": {
        "_Description": "resetQuery method reloads the queary with complete data and obseravable objects",
        "_Arguments": {
          "qid": "this arg holds the queryId ",
          "reuseExisting": "Boolean value, if set true it loads the existing query, if set false or if query does not exist yet then it creates new query"

        }
      },
      "loadQuery": {
        "_Description": "loadQuery method the load queary with complete data and obseravable objects",
        "_Arguments": {
          "qid": "this arg holds the queryId ",
          "createNew": "Boolean value, if set false it loads the existing query, if set true or if query does not exist yet then it creates new query"

        }
      },
      "AjaxRequest": {
        "_Description": "AjaxRequest is the method which is use to make ajax call and connecto DB",
        "_Arguments": {
          "Querydata": "this arg holds the requried data to cennect to DB",
          "callbacks": "this arg is function used as callback argument"
        }
      },
      "Data": {
        "validationRules": {
          "buildRules": {
            "_Description": "buildRules methods build the rules for the validation and return the rules and its msg",
            "_Arguments": {
              "requiredRules": "List of validation rules to be applied on the form, this list is a array of strings and each string is rule name defined in 'em/lib/validation/rules.js'"
            }
          }
        }
      }
    },
    "Utils": {
      "loopAsync": {
        "_Description": "loopAsync is the utility.js library method",
        "_Arguments": {

        }
      },
      "getBlockIdFromClassPath": {
        "_Description": "getBlockIdFromClassPath method get the blockid by appending (. and / ect)",
        "_Arguments": {
          "SlashClassPath": "this arg contain block id"
        }
      }
    }

  },
  "WidgetConfigurations": {
    "APActionCenter": {
      "_Description": "A sliding window or panel on the right corner which displays some controls or user information",
      "Type": "APActionCenter"
    },
    "APBackground": {
      "_Description": "Widget to display background images",
      "Type": "APBackground",
      "Config": {
        "Class": {
          "_Description": "CSS Class to be applied and also it uses 'img' tag and sets image path",
          "_DataType": "String"
        },
        "Repeat": {
          "_Description": "CSS Class to be applied and also it uses 'div' tag and sets background image, 'Repeat' takes precedence over 'class'",
          "_DataType": "String"
        },
        "Images": {
          "_Description": "Image path or locales path to get Image path as array of strings. If more than 1 image paths is given then it chooses image randomly",
          "_DataType": "Array"
        }
      }
    },
    "APBreadCrumbs": {
      "_Description": "Widget to display current path for navigation",
      "Type": "APBreadCrumbs"
    },
    "APButton": {
      "_Description": "Widget to create Button",
      "Type": "APButton",
      "DOM": "_CommonDescriptions.ButtonDOM",
      "Action": "_CommonDescriptions.Action",
      "Text": "_CommonDescriptions.Text",
      "Attr": {
        "_Description": "Html attributes to be applied to the DOM element",
        "_DataType": "Object"
      }
    },
    "APCSS3Menu": {
      "_Description": "Widget to create Menu, it is generally used under APMainMenu widget",
      "Type": "APCSS3Menu",
      "Config": {
        "hoverDelay": "_CommonDescriptions.hoverDelay",
        "collapsible": "_CommonDescriptions.collapsible",
        "items": {
          "_Description": "Items to be displayed in menu, each item is an object",
          "_DataType": "Array",
          "_InnerFields": {
            "lockedCls": {
              "_Description": "Css class to be added to menu item if the user doesn't have access to it",
              "_DataType": "String"
            },
            "text": "_CommonDescriptions.Text",
            "href": {
              "_Description": "href link to the menu item",
              "_DataType": "String"
            },
            "iconCls": "_CommonDescriptions.iconClass",
            "target": {
              "_Description": "HTML target attribute",
              "_DataType": "String"
            },
            "accessCode": "_CommonDescriptions.accessCode",
            "locked": {
              "_Description": "Set true if the menu item is to be locked, default value is false",
              "_DataType": "Boolean"
            },
            "items": {
              "_Description": "Sub menu items, properties are same as menu items",
              "_DataType": "Array"
            },
            "extraCls": {
              "_Description": "Additional Css class to be added to menu item",
              "_DataType": "String"
            }
          }
        },
        "openCloseBtnSel": {
          "_Description": "Selector to select expand and collapse button, default value is '.openclose-button'",
          "_DataType": "String"
        },
        "activeMenuItemClass": {
          "_Description": "Css class for active menu item, default class is 'menu-item-active'",
          "_DataType": "String"
        },
        "menuSel": {
          "_Description": "Css selector to select menu, default value is '.menu'",
          "_DataType": "String"
        },
        "itemSel": {
          "_Description": "Css selector to select item in menu, default value is '.menu-item'",
          "_DataType": "String"
        },
        "expandedClass": {
          "_Description": "Css Class to be added when menu is expanded, default value is 'expanded'",
          "_DataType": "String"
        },
        "collapsedClass": {
          "_Description": "Css Class to be added when menu is expanded, default value is 'collapsed'",
          "_DataType": "String"
        }
      }
    },
    "APCarousel": {
      "_Description": "Widget to create Carousel",
      "Type": "APCarousel",
      "QueryId": "_CommonDescriptions.QueryId",
      "Config": {
        "autoRead": [ "_CommonDescriptions.autoRead", "Default value is 'false'" ],
        "ajaxRequestEnabled": {
          "_Description": "Set true to enable ajax call, default value is 'True'",
          "_DataType": "Boolean"
        },
        "loadingTemplate": "_CommonDescriptions.loadingTemplate",
        "hasImages": {
          "_Description": "Not used",
          "_DataType": "Boolean"
        },
        "refreshBinding": {
          "_Description": "Not used",
          "_DataType": "Boolean"
        },
        "itemContainer": {
          "_Description": "Specifies DOM element to each item in items container, default value is 'div'",
          "_DataType": "String"
        },
        "itemsContainer": {
          "_Description": "Specifies DOM element to the items container block, default value is 'div'",
          "_DataType": "String"
        },
        "itemSelector": {
          "_Description": "Css selector to select all list items, default value is '.CarouselItem'",
          "_DataType": "String"
        },
        "slider": {
          "_Description": "Slider configuration",
          "_DataType": "Object",
          "_InnerFields": {
            "tooltipField": {
              "_Description": "Tooltip value field",
              "_DataType": "String"
            },
            "maxLabel": {
              "_Description": "data-min-label attribute value",
              "_DataType": "String"
            },
            "minLabel": {
              "_Description": "data-max-label attribute value",
              "_DataType": "String"
            }
          }
        },
        "maxVisibleItems": {
          "_Description": "Maximum number of items visible",
          "_DataType": "Integer"
        },
        "animation": {
          "_Description": "Animation effects, default value is 'jump'",
          "_DataType": "String",
          "_AvailableOptions": [ "flow", "jump" ]
        },
        "orientation": {
          "_Description": "Block orientation, default is horizontal",
          "_DataType": "String",
          "_AvailableOptions": [ "vertical", "horizontal" ]
        },
        "itemTemplate": "_CommonDescriptions.Template",
        "startingItem": {
          "_Description": "From which end the item should start displaying, default value is 'last'",
          "_DataType": "String",
          "_AvailableOptions": [ "first", "last" ]
        },
        "maximizeWhenOnlyItem": {
          "_Description": "Not used",
          "_DataType": "Boolean"
        },
        "spacingFactor": {
          "_Description": "Spacing between two items, default value is '1.2'",
          "_DataType": "Number"
        },
        "scalingFactor": {
          "_Description": "Scaling factor to reduce size of visible inactive items, default value is '0.1'",
          "_DataType": "Number"
        },
        "itemPositioning": {
          "_Description": "Position of item, default value is 'absolute'",
          "_DataType": "String",
          "_AvailableOptions": [ "absolute", "relative", "static", "fixed" ]
        },
        "easing": {
          "_Description": "Easing effects to be applied on Carousel items, default is 'easeInOutCubic'",
          "_DataType": "String",
          "_AvailableOptions": [
            "linear",
            "swing",
            "easeInQuad",
            "easeOutQuad",
            "easeInOutQuad",
            "easeInCubic",
            "easeOutCubic",
            "easeInOutCubic",
            "easeInQuart",
            "easeOutQuart",
            "easeInOutQuart",
            "easeInQuint",
            "easeOutQuint",
            "easeInOutQuint",
            "easeInExpo",
            "easeOutExpo",
            "easeInOutExpo",
            "easeInSine",
            "easeOutSine",
            "easeInOutSine",
            "easeInCirc",
            "easeOutCirc",
            "easeInOutCirc",
            "easeInElastic",
            "easeOutElastic",
            "easeInOutElastic",
            "easeInBack",
            "easeOutBack",
            "easeInOutBack",
            "easeInBounce",
            "easeOutBounce",
            "easeInOutBounce"
          ]
        },
        "maximizedClass": {
          "_Description": "Css class to be added if maximized, default value is 'maximized'",
          "_DataType": "String"
        }
      }
    },
    "APChart": {
      "_Description": "Widget to create Chart",
      "Type": "APChart",
      "QueryId": "_CommonDescriptions.QueryId",
      "Config": {
        "defaultTemplate": {
          "_Description": "Template to be displayed if no data is found, value is html string",
          "_DataType": "String"
        },
        "width": "_CommonDescriptions.width",
        "height": "_CommonDescriptions.height",
        "autoRead": [ "_CommonDescriptions.autoRead", "default value is 'false'" ],
        "others": {
          "_Description": "Other Configuration to chart widget, this works only if staticData is set to false",
          "_DataType": "Object",
          "_InnerFields": {
            "title": {
              "_Description": "Custom title for the chart widget",
              "_DataType": "Object",
              "_InnerFields": {
                "template": "_CommonDescriptions.Template",
                "externalTemplate": "_CommonDescriptions.Template"
              }
            }
          }
        },
        "staticData": "_CommonDescriptions.staticData",
        "refreshOnBind": "_CommonDescriptions.refreshOnBind",
        "formatData": {
          "_Description": "Formatting data for chart widget by grouping by Category, this works only if staticData is set to 'false'",
          "_DataType": "Object",
          "_InnerFields": {
            "preserveFields": {
              "_Description": "These fields will not be modified while formatting data, field names to be given as string of array",
              "_DataType": "Array"
            },
            "categories": {
              "_Description": "Category names as string of array",
              "_DataType": "Array"
            },
            "categoryColors": {
              "_Description": "Colors for corresponding Category as string of array",
              "_DataType": "Array"
            }
          }
        },
        "_Note": "All other configurations are same as kendoChart. <a href='http://docs.telerik.com/kendo-ui/api/javascript/dataviz/ui/chart'>click here</a> for more details"
      }
    },
    "APClock": {
      "_Description": "Widget to display time",
      "Type": "APClock",
      "Config": {
        "DateFormat": {
          "_Description": "Specify date format, default value is 'dddd d MMMM, yyyy'",
          "_DataType": "String"
        },
        "TimeFormat": {
          "_Description": "Specify time format, default value is 'hh:mm:ss tt'",
          "_DataType": "String"
        },
        "ShowDate": {
          "_Description": "Set true if date should be displayed, dafault value is 'false'",
          "_DataType": "Boolean"
        },
        "ShowTime": {
          "_Description": "Set true if time should be displayed, dafault value is 'true'",
          "_DataType": "Boolean"
        },
        "ShowUTC": {
          "_Description": "Set true if UTC value should be displayed, dafault value is 'false'",
          "_DataType": "Boolean"
        },
        "ShowTimeZone": {
          "_Description": "Set true if Time Zone should be displayed, dafault value is 'true'",
          "_DataType": "Boolean"
        },
        "Suffix": {
          "_Description": "Suffix string to clock",
          "_DataType": "String"
        },
        "Prefix": {
          "_Description": "Prefix string to clock",
          "_DataType": "String"
        }
      }
    },
    "APDiagram": {
      "_Description": "Widget to create diagrams using kendo diagram",
      "Type": "APDiagram",
      "QueryId": "_CommonDescriptions.QueryId",
      "Config": {
        "autoRead": [ "_CommonDescriptions.autoRead", "default value is 'false'" ],
        "hierarchical": {
          "_Description": "If set true it uses kendo HierarchicalDataSource else it uses kendo DataSource, default value is 'false'",
          "_DataType": "Boolean"
        },
        "staticData": "_CommonDescriptions.staticData",
        "refreshOnBind": "_CommonDescriptions.refreshOnBind",
        "width": "_CommonDescriptions.width",
        "height": "_CommonDescriptions.height",
        "shapeDefaults": {
          "_Description": "shapeDefaults configuration for kendoChart",
          "_DataType": "Object",
          "_InnerFields": {
            "visualTemplate": {
              "_Description": "Template to load visual element",
              "_DataType": "Object",
              "_InnerFields": {
                "module": {
                  "_Description": "Path of js file which returns the object which contains function which returns visual elements",
                  "_DataType": "String"
                },
                "fn": {
                  "_Description": "Function name in above module which returns a visual element to render for a given shape",
                  "_DataType": "String"
                }
              }
            },
            "_Note": "All other configurations are same as kendoChart shapeDefaults configuration. <a href='http://docs.telerik.com/kendo-ui/api/javascript/dataviz/ui/diagram#configuration-shapeDefaults'>click here</a> for more details"
          }
        },
        "_Note": "All other configurations are same as kendoChart. <a href='http://docs.telerik.com/kendo-ui/api/javascript/dataviz/ui/diagram'>click here</a> for more details"
      }
    },
    "APForm": {
      "_Description": "Widget to create Form",
      "Type": "APForm",
      "QueryId": "_CommonDescriptions.QueryId",
      "customModules": {
        "_Description": "Custom modules that are created once and used at many places, custom modules are identified by id",
        "_DataType": "Object",
        "_InnerFields": {
          "id": {
            "_Description": "Unique ID for the custom module",
            "_DataType": "String"
          },
          "path": {
            "_Description": "Path of the js file where custom module is defined",
            "_DataType": "String"
          }
        },
        "_Note": "Instance of the custom module is created once and stored in view and it is used where ever same module is to be loaded"
      },
      "Config": {
        "resetQuery": "_CommonDescriptions.releaseQuery",
        "Messages": {
          "_Description": "Messages to be displayed if any",
          "_DataType": "Object",
          "_InnerFields": {
            "text": "_CommonDescriptions.Text",
            "Class": {
              "_Description": "Css class of the element which displays message",
              "_DataType": "String"
            },
            "_Note": "'text' property chould be configured in corresponding query file"
          }
        },
        "FormTemplate": [ "_CommonDescriptions.Template", "Defalut template is 'widget/forms/form'" ],
        "Buttons": "_CommonDescriptions.toolBarButtons"
      }
    },
    "APGrid": {
      "_Description": "Widget to create Grid",
      "Type": "APGrid",
      "Dependables": "_CommonDescriptions.Dependables",
      "QueryId": "_CommonDescriptions.QueryId",
      "Config": {
        "autoBind": "_CommonDescriptions.autoBind",
        "checkable": {
          "_Description": "If set true it displays text box for selecting rows",
          "_DataType": "Boolean"
        },
        "isSingletonQuery": {
          "_Description": "If set true and query is already loaded by other widget, then it uses the same query and data to the new widget which is being loaded. If set false and even if query is already loaded by other widget it creates new query with widget ID prefixed to the query ID, default value is 'true'",
          "_DataType": "Boolean"
        },
        "resetQuery": {
          "_Description": "If set true it resets the query or viewModel, default value is 'false'",
          "_DataType": "Boolean"
        },
        "statusTracker": {
          "_Description": "Variable or property name to track status",
          "_DataType": "String"
        },
        "toolbartitle": {
          "_Description": "Title for toolbar",
          "_DataType": "String"
        },
        "createNewQuery": {
          "_Description": "If set true it creates new query or viewModel even if it is existing, default value is 'false', works only if reset query is set to 'false'",
          "_DataType": "Boolean"
        },
        "messagebar": "_CommonDescriptions.messagebarForListViewAndGrid",
        "isDepending": "_CommonDescriptions.isDepending",
        "doubleTapExpand": {
          "_Description": "If set true it expands the targeted row on double click, default value is 'true'",
          "_DataType": "Boolean"
        },
        "releaseQuery": "_CommonDescriptions.releaseQuery",
        "customContentScroll": [ "_CommonDescriptions.customScroll", "Default value is 'true'" ],
        "customScrollConfigs": {
          "_Description": "Custom Scroll confuguration",
          "_DataType": "Object",
          "_InnerFields": {
            "-Selector-": {
              "_Description": "jQuery Selector to select element to which custom scrolls are to be applied, use '.k-grid-content' for grid",
              "_DataType": "Object",
              "_InnerFields": {
                "_Note": "Configurations are same as nicescroll. <a href='http://areaaperta.com/nicescroll/'>click here</a> for more details"
              }
            }

          }
        },
        "refreshAfterCommand": "_CommonDescriptions.refreshAfterCommand",
        "theme": {
          "_Description": "Set kendo themes for grid",
          "_DataType": "String"
        },
        "activateButtons": {
          "_Description": "It dispalys the mentioned buttons on toolbar always. It accepts array of strings, string is the action string in toolbar config object",
          "_DataType": "Array"
        },
        "actionFilters": {
          "_Description": "It dispalys the mentioned buttons on toolbar depending on condition specified. It accepts array of objects, each object is a condition for button to display or hide",
          "_DataType": "Array",
          "_InnerFields": {
            "action": {
              "_Description": "Action name for which condition is to be applied, value should be same as action string in toolbar config object",
              "_DataType": "String"
            },
            "maxLength": {
              "_Description": "Displays control if selected items are less than maxLength and at least one item is selected",
              "_DataType": "Integer"
            },
            "minCount": {
              "_Description": "Minimum number of selected items based on which conditin will be checked",
              "_DataType": "Integer"
            },
            "maxCount": {
              "_Description": "Maximum number of selected items based on which conditin will be checked",
              "_DataType": "Integer"
            },
            "condition": {
              "_Description": "Condition to be checked between minCount and maxCount properties, default value is 'default'",
              "_DataType": "String",
              "_AvailableOptions": [
                "default",
                "none",
                "all",
                "and",
                "group"
              ]
            }
          }
        },
        "toolbar": {
          "_Description": "Creating toolbar items. It accepts array of objects",
          "_DataType": "Array",
          "_InnerFields": {
            "accessCode": "_CommonDescriptions.accessCode",
            "action": "_CommonDescriptions.Action",
            "iconClass": "_CommonDescriptions.iconClass",
            "extraClass": "_CommonDescriptions.extraClass",
            "iconRequired": "_CommonDescriptions.iconRequired",
            "text": "_CommonDescriptions.Text",
            "showText": "_CommonDescriptions.showText",
            "customModule": {
              "_Description": "Defining custom module which can be loaded in extended module",
              "_DataType": "Object",
              "_InnerFields": {
                "id": {
                  "_Description": "ID for the module",
                  "_DataType": "String"
                },
                "path": {
                  "_Description": "Path for js file where custom module is defined",
                  "_DataType": "String"
                }
              }
            },
            "autoOpen": {
              "_Description": "Set true if custom module to be opened when page loads else set to false",
              "_DataType": "Boolean"
            },
            "queryId": "_CommonDescriptions.QueryId",
            "externalTemplate": "_CommonDescriptions.Template",
            "UrlId": "_CommonDescriptions.UrlId"
          }
        },
        "extendedToolbarModules": {
          "_Description": "Additional module to ba attached to the grid, each modules is stored as object in extendedToolbarModules array",
          "_DataType": "Array",
          "_InnerFields": {
            "id": {
              "_Description": "ID for the module, should be same as customModule ID which is to be loaded",
              "_DataType": "String"
            },
            "path": {
              "_Description": "Validation module js file path",
              "_DataType": "String"
            },
            "config": {
              "_Description": "extendedToolbarModules configuration object",
              "_DataType": "Object",
              "_InnerFields": {
                "validation": {
                  "_Description": "extendedToolbarModules form validation configuration object",
                  "_DataType": "Object",
                  "_InnerFields": {
                    "rules": {
                      "_Description": "extendedToolbarModules form validation Rules to be overridden, array of objects",
                      "_DataType": "Array",
                      "_InnerFields": {
                        "rule": {
                          "_Description": "Rule name to be modified",
                          "_DataType": "String"
                        },
                        "config": {
                          "_Description": "Configuration object of rule, name value pair",
                          "_DataType": "Object"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "externalTemplate": "_CommonDescriptions.Template"
        },
        "_Note": "All other configurations are same as kendoGrid. <a href='http://docs.telerik.com/kendo-ui/api/javascript/ui/grid'>click here</a> for more details"
      }
    },
    "APImage": {
      "_Description": "Widget to display image",
      "Type": "APImage",
      "Data": {
        "_Description": "Data to APImage widget",
        "_DataType": "Object",
        "_InnerFields": {
          "Src": {
            "_Description": "Path of the image file",
            "_DataType": "String"
          }
        }
      },
      "Config": {
        "Class": "_CommonDescriptions.Class"
      }
    },
    "APListView": {
      "_Description": "Widget to display list view",
      "Type": "APListView",
      "Dependables": "_CommonDescriptions.Dependables",
      "Config": {
        "isDepending": "_CommonDescriptions.isDepending",
        "messagebar": "_CommonDescriptions.messagebarForListViewAndGrid",
        "customScroll": [ "_CommonDescriptions.customScroll", "Default value is 'true'" ],
        "dropTarget": {
          "_Description": "If set true it makes the current block as kendoDropTarget, default value is 'false'",
          "_DataType": "Boolean"
        },
        "dragEnabled": {
          "_Description": "If set true it makes the ListView elements as kendoDraggable, default value is 'false'",
          "_DataType": "Boolean"
        },
        "uniqueIdField": {
          "_Description": "Key to identity the dragable element, default value is 'uid'",
          "_DataType": "String"
        },
        "dragEnterClass": {
          "_Description": "Css class to be assigned on drop target when dragabble item enters target, default value is 'drag-hover'",
          "_DataType": "String"
        },
        "statusTracker": {
          "_Description": "Not Used",
          "_DataType": "String"
        },
        "refreshAfterCommand": "_CommonDescriptions.refreshAfterCommand",
        "template": "_CommonDescriptions.Template",
        "checkable": {
          "_Description": "Set true to track checked state of each item",
          "_DataType": "Boolean"
        },
        "checkedStateTrackingMember": {
          "_Description": "Attribute name to track checked state of each item",
          "_DataType": "String"
        },
        "autoBind": "_CommonDescriptions.autoBind"
      }
    },
    "APLogOut": {
      "_Description": "Widget to display logout button, Logic is to be written in events file with same name as 'Name' or 'Class' property value of this widget",
      "Type": "APLogOut"
    },
    "APLogin": {
      "_Description": "Widget to display login controls",
      "Type": "APLogin"
    },
    "APMainMenu": {
      "_Description": "Widget to display menu",
      "Type": "APMainMenu",
      "Title": {
        "_Description": "Title for Main Menu widget",
        "_DataType": "String"
      },
      "Config": {
        "overlaySelector": {
          "_Description": "Css selector to select overlay elements for this widget",
          "_DataType": "String"
        },
        "hoverDelay": "_CommonDescriptions.hoverDelay",
        "collapsible": "_CommonDescriptions.collapsible",
        "ButtonTitle": {
          "_Description": "Not in use",
          "_DataType": "String"
        }
      }
    },
    "APMenu": {
      "_Description": "Not in use",
      "Type": "APMenu"
    },
    "APMessageBar": {
      "_Description": "Widget to display messages using 'displayMessage' and 'displayErrors' methods",
      "Type": "APMessageBar",
      "Config": {
        "messagebar": {
          "_Description": "messagebar configuration",
          "_DataType": "Object",
          "_InnerFields": {
            "hidebuttontext": {
              "_Description": "Text to be displayed on hide button",
              "_DataType": "String"
            }
          }
        }
      }
    },
    "APMetroContent": {
      "_Description": "Widget to display details within a block or box",
      "Type": "APMetroContent",
      "Config": {
        "nestedEnabled": {
          "_Description": "If set true it uses jQuery nested plugin, dafault value is 'false'",
          "_DataType": "Boolean"
        },
        "useFreewall": {
          "_Description": "If set true it uses jQuery freewall plugin, dafault value is 'false'",
          "_DataType": "Boolean"
        },
        "adjustWidth": {
          "_Description": "If set true it sets width automatically with respect to its parent container, default value is 'false'",
          "_DataType": "Boolean"
        },
        "dragEnabled": {
          "_Description": "If set true it creates a dragdealer widget, default value is 'true'",
          "_DataType": "Boolean"
        },
        "autoCenter": {
          "_Description": "If set true it centers the block with respect to its parent block, default value is 'false'",
          "_DataType": "Boolean"
        },
        "scrollToEnd": {
          "_Description": "If set true it positions the left end of horizontal scroll bar to prescribed position, default value is 'false'",
          "_DataType": "Boolean"
        },
        "gutter": {
          "_Description": "Vertical and horizon spacing between the row and column, default value is '20'",
          "_DataType": "Integer"
        },
        "minWidth": {
          "_Description": "Minimum width for jQuery nested plugin and is equal to cellW for jQuery freeWall plugin, default value is '205'",
          "_DataType": "Integer"
        },
        "minHeight": {
          "_Description": "Minimum height for jQuery nested plugin and is equal to cellH for jQuery freeWall plugin, default value is '205'",
          "_DataType": "Integer"
        },
        "animate": {
          "_Description": "Set true to make block move with animation, default value is 'false'",
          "_DataType": "Boolean"
        },
        "customAnimation": {
          "_Description": "Set true to perform custom animation while loading, defalut value is 'true'",
          "_DataType": "Boolean"
        },
        "selector": {
          "_Description": "Css selector for selecting metrocontentblock, default value is '> .Blocks > .Block'",
          "_DataType": "String"
        },
        "_Note": "nestedEnabled gets preference if both nestedEnabled and useFreewall are set true.<br />For more configurations of jQuery Nested. <a href='http://suprb.com/apps/nested/'>click here</a> for more details<br />For more configurations of jQuery FreeWall <a href='http://vnjs.net/www/project/freewall/#options'>click here</a> for more details"
      }
    },
    "APMetroContentBlock": {
      "_Description": "Individual item or block under MetroContent widget",
      "Type": "APMetroContentBlock",
      "Template": [ "_CommonDescriptions.Template", "Default template path is 'widget/metrocontent/metrodatacontent'" ],
      "Config": {
        "Size": "_CommonDescriptions.Size",
        "Path": {
          "_Description": "Not in use",
          "_DataType": "String"
        },
        "External": "_CommonDescriptions.External",
        "BackgroundImage": {
          "_Description": "Background image class, default value is 'Block11n'",
          "_DataType": "String"
        },
        "Message": {
          "_Description": "Content to display in the Block",
          "_DataType": "Object",
          "_InnerFields": {
            "IsPlaintext": {
              "_Description": "If set true it reads only content attribute and displays it else it reads all attributes, default value is 'false'",
              "_DataType": "Boolean"
            },
            "IconClass": "_CommonDescriptions.iconClass",
            "Title": {
              "_Description": "Title of the block, it can be fetched from locales folder. It accepts JSON path from where text is to be fetched or normal string",
              "_DataType": "String"
            },
            "Content": {
              "_Description": "Content of the Block, it can be fetched from locales folder. It accepts JSON path from where text is to be fetched or normal string",
              "_DataType": "String"
            }
          }
        }
      },
      "_Note": "This widget can be followed by blocks, refer CreatingElements section for creating blocks"
    },
    "APNav": {
      "_Description": "Widget to create a set of navigation links",
      "Type": "APNav",
      "DOM": {
        "_Description": "DOM element to be used",
        "_DataType": "String"
      },
      "Data": {
        "_Description": "Data to create nav widget, it takes array of objects",
        "_DataType": "Array",
        "_InnerFields": {
          "Attr": "_CommonDescriptions.Attr",
          "text": {
            "_Description": "Text to be displayed",
            "_DataType": "Object",
            "_InnerFields": {
              "value": {
                "_Description": "Value to be set",
                "_DataType": "String"
              }
            }
          }
        }
      }
    },
    "APPages": {
      "_Description": "Widget to open webpage in iFrame tag element",
      "Type": "APPages",
      "Config": {
        "Url": {
          "_Description": "Source to iframe element, a URL string",
          "_DataType": "String"
        }
      }
    },
    "APPanelBar": {
      "_Description": "Widget to create panelbar",
      "Type": "APPanelBar",
      "Config": {
        "idField": {
          "_Description": "Field name in response data to be set as ID",
          "_DataType": "String"
        },
        "collapseOnSelect": {
          "_Description": "It is an alternative to 'expandMode-single', if set true it collapses currently active item on select event and expands new item",
          "_DataType": "Boolean"
        },
        "autoRead": [ "_CommonDescriptions.autoRead", "default value is 'true'" ],
        "loadingTemplate": "_CommonDescriptions.loadingTemplate",
        "iconClickable": {
          "_Description": "If set true it adds event handler on click of menu icon",
          "_DataType": "Boolean"
        },
        "expandFirst": {
          "_Description": "If set true it expands the first item in the widget",
          "_DataType": "Boolean"
        },
        "autoSelectFirst": {
          "_Description": "If set true it selects the first item, default value is 'true'",
          "_DataType": "Boolean"
        },
        "displayMember": {
          "_Description": "Property in data which is to be displayed",
          "_DataType": "String"
        },
        "grouping": {
          "_Description": "To group items in response data",
          "_DataType": "Object",
          "_InnerFields": {
            "key": {
              "_Description": "Property on which data is grouped",
              "_DataType": "String"
            }
          }
        },
        "itemIconAddonMember": {
          "_Description": "Css class to display icon",
          "_DataType": "String"
        },
        "_Note": "All other configurations are same as kendoPanelBar. <a href='http://docs.telerik.com/kendo-ui/api/javascript/ui/panelbar'>click here</a> for more details"
      }
    },
    "APProfileMenu": {
      "_Description": "Widget to profile menu",
      "Action": {
        "_Description": "Not in use",
        "_DataType": "String"
      },
      "Config": {
        "OpenClass": {
          "_Description": "Css class to be applied to open the menu, default value is 'Opened'",
          "_DataType": "String"
        },
        "TargetSelector": {
          "_Description": "Css Selector string to select the targeted element, default value is '.ProfileIcon'",
          "_DataType": "String"
        }
      },
      "Template": [ "_CommonDescriptions.Template", "Items list to be created in this template" ],
      "Type": "APProfileMenu"
    },
    "APReorderableTabStrip": {
      "_Description": "Widget to create tab strip",
      "Type": "APReorderableTabStrip",
      "Config": {
        "theme": {
          "_Description": "Theme to ba applied to widget",
          "_DataType": "String",
          "_AvailableOptions": [ "default", "light", "dark" ]
        },
        "defaultItem": {
          "_Description": "Index of the tab to be opened immediately after loading the widget, by default it opens the last tab",
          "_DataType": "Integer"
        },
        "Tools": {
          "_Description": "Toolbar options for APReorderableTabStrip widget",
          "_DataType": "Object",
          "$Toolkey$": {
            "_Description": "Control name or any string can be given in place of '$Toolkey$'",
            "_DataType": "Object",
            "_InnerFields": {
              "text": "_CommonDescriptions.Text",
              "action": "_CommonDescriptions.Action",
              "accessCode": "_CommonDescriptions.accessCode",
              "iconClass": "_CommonDescriptions.iconClass",
              "skip": {
                "_Description": "If set true it skips loading control",
                "_DataType": "Boolean"
              },
              "externalTemplate": [ "_CommonDescriptions.Template", "Defalut template is 'widget/tabsbutton'" ]
            }
          }
        },
        "minTabs": {
          "_Description": "Minimum tabs to be left open, i.e if number of tabs are less than or equal to minTabs, those tabs cannot be closed or removed. Default value is'1'",
          "_DataType": "Integer"
        }
      }
    },
    "APSetCulture": {
      "_Description": "Widget to display language options in dropdown list to set culture",
      "Type": "APSetCulture",
      "Title": {
        "_Description": "Title for the widget",
        "_DataType": "String"
      },
      "Config": {
        "Data": {
          "_Description": "Datasource to be set to the listview, it takes array of objects, each object contains 'text' and 'value' fields",
          "_DataType": "Array"
        }
      }
    },
    "APSlider": {
      "_Description": "Widget to display slider",
      "Type": "APSlider",
      "Config": {
        "_Note": "All configurations are same as kendoSlider. <a href='http://docs.telerik.com/kendo-ui/api/javascript/ui/slider'>click here</a> for more details"
      }
    },
    "APSplitter": {
      "_Description": "Widget to create kendo splitter",
      "Type": "APSplitter",
      "Config": {
        "_Note": "All configurations are same as kendoSplitter. <a href='http://docs.telerik.com/kendo-ui/api/javascript/ui/splitter'>click here</a> for more details"
      }
    },
    "APTemplatedWidget": {
      "_Description": "Widget to load custom templates",
      "Type": "APTemplatedWidget",
      "Dependables": "_CommonDescriptions.Dependables",
      "HasChildren": {
        "_Description": "If set true it inserts the template before blocks container",
        "_DataType": "Boolean"
      },
      "QueryId": "_CommonDescriptions.QueryId",
      "Config": {
        "loadingTemplate": [ "_CommonDescriptions.loadingTemplate", "Default template is '<div class='k-loading-image'></div>'" ],
        "contentClass": {
          "_Description": "Css class to be assigned to widget content block",
          "_DataType": "String"
        },
        "customScroll": [ "_CommonDescriptions.customScroll", "Default value is 'false'" ],
        "autoRead": "_CommonDescriptions.autoRead",
        "template": "_CommonDescriptions.Template",
        "defaultContent": {
          "_Description": "String or HTML string to be displayed if there is no data display",
          "_DataType": "String"
        },
        "contentStatusClass": {
          "_Description": "Css class to be applied if widget contains data, it gets removed if there is no data to display, default value is 'HasContent'",
          "_DataType": "String"
        },
        "rebindOnRender": {
          "_Description": "If set true it rebinds data after the template or data is rendered",
          "_DataType": "Boolean"
        },
        "Blocks": {
          "_Description": "Creating nested elements",
          "_DataType": "Array",
          "_Note": "Refer <a href='#CreatingElements'>CreatingElements</a> section for more details"
        }
      }
    },
    "APTimer": {
      "_Description": "Count down timer widget",
      "Type": "APTimer",
      "Config": {
        "QueryId": "_CommonDescriptions.QueryId",
        "PropPath": {
          "_Description": "Path to store max ticks and passed ticks, default value is 'TickCount'",
          "_DataType": "String"
        },
        "maxTicks": {
          "_Description": "Number of ticks after which 'stopped' event gets triggered",
          "_DataType": "Integer"
        },
        "autoStart": {
          "_Description": "Set true if timer should start automatically,default value is 'true'",
          "_DataType": "Boolean"
        },
        "interval": {
          "_Description": "interval in milli-seconds, default value is '1000'",
          "_DataType": "Integer"
        }
      }
    },
    "APToggleButton": {
      "_Description": "Widget to create toggle buttons",
      "Type": "APToggleButton",
      "DOM": "_CommonDescriptions.ButtonDOM",
      "Action": "_CommonDescriptions.Action",
      "Text": "_CommonDescriptions.Text",
      "Class": "_CommonDescriptions.Class",
      "Bindings": "_CommonDescriptions.Bindings",
      "Config": {
        "self": {
          "_Description": "If set true it skips Bindings attribute, default value is 'false'",
          "_DataType": "Boolean"
        },
        "activeClassName": {
          "_Description": "Css class name to be applied when selected, default value is 'k-state-active'",
          "_DataType": "String"
        },
        "groupName": {
          "_Description": "Group name to which button belong to, default value is 'Toggle'",
          "_DataType": "String",
          "_Note": "Only one button can be selected from eachgroup at a time"
        },
        "mode": {
          "_Description": "If the mode is 'radio' the toggle wouldn't work on the element that is already ON, default value is 'toggle'",
          "_DataType": "String"
        },
        "name": {
          "_Description": "This is not intended to be changed, default value is 'ToggleButton'",
          "_DataType": "String"
        },
        "containerSel": {
          "_Description": "Css selector for the container within which it selects all Toggle buttons and group it, default container is 'body'",
          "_DataType": "String"
        }
      }
    },
    "APToolBar": {
      "_Description": "Widget to create toolbar",
      "Type": "APToolBar",
      "Config": {
        "standalone": {
          "_Description": "Set true if the widget is standalone widget, if widget is within another widget like grid or zoomview then set it to false, default value is 'false'",
          "_DataType": "Boolean"
        },
        "template": {
          "_Description": "Template path for the toolbar template, default path is 'widget/toolbar/toolbar'",
          "_DataType": "String"
        },
        "EnableButtonsExtender": {
          "_Description": "If set true it creates kendoButtonExtender, default value is 'false'",
          "_DataType": "Boolean"
        },
        "maxButtons": {
          "_Description": "Maximum number of buttons to be displayed, default value is '2'",
          "_DataType": "Integer",
          "_Note": "This works only if 'EnableButtonsExtender' is set true"
        },
        "Buttons": "_CommonDescriptions.toolBarButtons",
        "_Note": "To make use of EnableButtonsExtender and maxButtons, changes has to me made in toolbar.js in engine"
      }
    },
    "APTreeView": {
      "_Description": "Widget to create TreeView",
      "Type": "APTreeView",
      "QueryId": "_CommonDescriptions.QueryId",
      "Config": {
        "dropTargetSel": {
          "_Description": "Css selector to select drop target element, default value is ':text'",
          "_DataType": "String"
        },
        "idField": {
          "_Description": "Field name which has to be set as ID",
          "_DataType": "String"
        },
        "valueField": {
          "_Description": "Field name from where value has to be fetched, default value is 'value'",
          "_DataType": "String"
        },
        "editable": {
          "_Description": "Not in use, default value is 'false'",
          "_DataType": "Boolean"
        },
        "_Note": "All configurations are same as kendoTreeView. <a href='http://docs.telerik.com/kendo-ui/api/javascript/ui/treeview'>click here</a> for more details"
      }
    },
    "APWaiting": {
      "_Description": "Widget to display animated image and message while loading or waiting",
      "Type": "APWaiting",
      "_Note": "There is no configurations for this widget, use methods such as show, hide to display and hide widget. Refer waiting.js in engine for more methods and its arguments"
    },
    "APWidgetMetroContentBlock": {
      "_Description": "Metro Content Block Widget",
      "Type": "APWidgetMetroContentBlock",
      "QueryId": "_CommonDescriptions.QueryId",
      "Class": "_CommonDescriptions.Class",
      "Template": [ "_CommonDescriptions.Template", "Default template path is 'widget/metrocontent/widgetmetrocontent'" ],
      "Config": {
        "Path": {
          "_Description": "Not in use",
          "_DataType": "String"
        },
        "External": "_CommonDescriptions.External",
        "DataAction": {
          "_Description": "Action to be routed if DataSourceConfig is defined in Config object in Query page or viewModel",
          "_DataType": "String"
        },
        "Size": "_CommonDescriptions.Size"
      }
    },
    "APWindow": {
      "_Description": "Widget create popup window to display widget or data",
      "Type": "APWindow",
      "QueryId": "_CommonDescriptions.QueryId",
      "Config": {
        "maximize": {
          "_Description": "Set true to maximize window after initialization of widget, dafault value is 'false'",
          "_DataType": "Boolean"
        },
        "uniqueId": {
          "_Description": "If present it register the window module in objectStore in View",
          "_DataType": "Boolean"
        },
        "noCenter": {
          "_Description": "If set true the window widget will not be positioned to center, default value is 'false'",
          "_DataType": "Boolean"
        },
        "MessageType": {
          "_Description": "Set to 'Alert' if using it as alert box, if fetches message from viewModel 'State.Query.Alert'",
          "_DataType": "String"
        },
        "AutoOpen": {
          "_Description": "Set true to open window after initialization of widget",
          "_DataType": "Boolean"
        },
        "titlePath": {
          "_Description": "Object Path in viewModel to fetch title for this widget",
          "_DataType": "Boolean",
          "_Note": "First it checks for 'KeyTitle' in current block object, if not found then it loads query if any and looks for 'Title' in viewModel if not found then it searches in this path in viewModel"
        },
        "_Note": "All configurations are same as kendoWindow. <a href='http://docs.telerik.com/kendo-ui/api/javascript/ui/window'>click here</a> for more details"
      }
    },
    "APWizard": {
      "_Description": "Widget create Wizard",
      "Type": "APWizard",
      "_Note": "Wizard steps should be written in 'Blocks' array sibling to widget object, each array item is a WizardStep Widget"
    },
    "APWizardStep": {
      "_Description": "Widget create Wizard steps, it is to be written under 'Blocks' array sibling to APWizard widget",
      "Type": "APWizardStep",
      "Class": "_CommonDescriptions.Class",
      "Name": {
        "_Description": "Name of the wizard step",
        "_DataType": "String"
      },
      "Config": {
        "animationDuration": {
          "_Description": "Duration of how long the animation will run, dafault value is '250'",
          "_DataType": "Integer"
        },
        "StepIndex": {
          "_Description": "Index of the wizard step",
          "_DataType": "Integer",
          "_Note": "WizardStep with StepIndex '0' is loaded first on the APWizard widget, other WizardSteps can be loaded by setting name of the widget in 'data-step-target' attribute of buttons and calling 'next' method in event handler"
        },
        "customModules": {
          "_Description": "Array of Custom module ID created using APForm, it loads each modules under this wizard step",
          "_DataType": "Array"
        }
      },
      "_Note": "Wizard contents should be written in 'Blocks' array sibling to APWizardStep widget object"
    },
    "APXmlViewer": {
      "_Description": "Widget to display XML data in tree view, this widget is extension of APTemplatedWidget",
      "Type": "APXmlViewer",
      "_extends": "WidgetConfigurations.APTemplatedWidget"
    },
    "APZoomView": {
      "_Description": "Widget to display content in zoomable container",
      "Type": "APZoomView",
      "Config": {
        "slider": {
          "_Description": "Slider configuration for APZoomView widget, and it is loaded in toolBar block",
          "_DataType": "Object",
          "_InnerFields": {
            "enabled": {
              "_Description": "Set true to enable slider",
              "_DataType": "Boolean"
            },
            "template": {
              "_Description": "Template path for the slider template, default path is 'widget/zoomview/zoomslider'",
              "_DataType": "String"
            }
          }
        },
        "defaultContent": {
          "_Description": "Message to be displayed if there is no data display, it can also be path in locales",
          "_DataType": "String"
        },
        "ToolBar": {
          "_Description": "ToolBar button configuration which was loaded by 'fieldsTemplate', it take array of objects",
          "_DataType": "Array",
          "_InnerFields": {
            "isEnabled": {
              "_Description": "Set true to enable button",
              "_DataType": "Boolean"
            },
            "action": {
              "_Description": "Action name to identify button with data-action attribute assigned to button in 'fieldsTemplate'",
              "_DataType": "String"
            }
          }
        },
        "fieldsTemplate": [ "_CommonDescriptions.Template", "Loads the template in toolbar block, it can also be used to load toolbar buttons" ],
        "autoRead": [ "_CommonDescriptions.autoRead", "Default value is 'true'" ]
      },
      "ZoomLevel": {
        "_Description": "Zoom level configuration for APZoomView widget",
        "_DataType": "Object",
        "_InnerFields": {
          "config": {
            "_Description": "Zoom level configuration for APZoomView widget",
            "_DataType": "Object",
            "_InnerFields": {
              "zoom_min": {
                "_Description": "Minimum zoom level",
                "_DataType": "Integer"
              },
              "zoom_max": {
                "_Description": "Maximum zoom level",
                "_DataType": "Integer"
              },
              "transition": {
                "_Description": "Transition Effect for ZoomView",
                "_DataType": "String"
              },
              "zoom_animation": {
                "_Description": "Transition Effect for ZoomView, same as transition",
                "_DataType": "String"
              },
              "base64": {
                "_Description": "If set true it combines the canvas over the image",
                "_DataType": "Boolean",
                "_Note": "To use this option 'isCanvas' must be set to true"
              },
              "width": {
                "_Description": "Not in use",
                "_DataType": "Integer"
              },
              "height": {
                "_Description": "Not in use",
                "_DataType": "Integer"
              },
              "isCanvas": {
                "_Description": "Set true to create canvas on content of zoonView widget",
                "_DataType": "Boolean"
              },
              "multiselect": {
                "_Description": "Set true to select multiple objects on widget, default value is 'true'",
                "_DataType": "Boolean"
              },
              "selectedColor": {
                "_Description": "Color of selector element, default value is 'green'",
                "_DataType": "String"
              },
              "strictMode": {
                "_Description": "If set true it does not display the status of the process, default value is 'false'",
                "_DataType": "Boolean"
              }
            }
          },
          "value": {
            "_Description": "Zoom value to be applied when Widget is initialized",
            "_DataType": "Integer"
          }
        }
      }
    }
  }
}